---
title: "Não Supervisionado - PCA"
execute: 
  warning: false
format:
  html:
    toc: true
    html-math-method: katex
    css: styles.css
editor_options: 
  chunk_output_type: inline
---

```{r}
library(tidyverse) 
library (janitor)
library (gt)
library (PerformanceAnalytics)
library(plotly)
library(kableExtra)
library(ggrepel)
library(factoextra)
```

# Base de Dados

```{r}
# Selecionar variáveis quantitativas
df <- mtcars |> 
select (mpg, disp, hp, drat, wt, qsec) |> 

# Fazer o z-score (padronizacao)  
scale() |> data.frame()
```

# Correlações

```{r}
chart.Correlation(df, histogram = TRUE, method = "pearson")
DataExplorer::plot_correlation(df)
```

# PCA

Análise de Componentes Princpais

```{r}
afpc <- prcomp(df)
summary(afpc)

# Atributos:

# sdev: corresponde à raiz quadrada dos eigenvalues, ou seja, os desvios-padrão dos componentes principais.

# rotation: corresponde à matriz de tamanho jxj de eigenvectors, em que j 
# representa a quantidade de variáveis da base de dados.

# center: médias de cada variável utilizadas para após a padronização.

# scale: desvios-padrão de cada variável utilizadas para a padronização.

data.frame(afpc$rotation) |>
  mutate(var = names(df)) |> 
  pivot_longer(cols = !var) |> 
  mutate(var = factor(var)) |>
  ggplot(aes(x = var, y = value, fill = var)) +
  geom_col() +
  facet_wrap(~name) +
  labs(x = NULL, y = NULL, fill = "Legenda:") 
```



```{r}
ggplotly(
  fviz_eig(X = afpc,
           ggtheme = theme_bw(), 
           barcolor = "dodgerblue4", 
           barfill = "dodgerblue4",
           linecolor = "darkgoldenrod3")
  )
```
## Cargas Fatoriais e Comunalidades

```{r}
# Extraindo as Cargas Fatoriais
k <- sum((afpc$sdev ^ 2) > 1) #número de variáveis presentes na base de dados com carga maior que 1
cargas_fatoriais <- afpc$rotation[, 1:k] %*% diag(afpc$sdev[1:k])

# Visualizando as cargas fatoriais
data.frame(cargas_fatoriais) %>%
  rename(F1 = X1,
         F2 = X2) %>%
  kable() %>%
  kable_styling(bootstrap_options = "striped", 
                full_width = T, 
                font_size = 12)

#Visualizando as Comunalidades
data.frame(rowSums(cargas_fatoriais ^ 2)) %>%
  rename(comunalidades = 1) %>%
  kable() %>%
  kable_styling(bootstrap_options = "striped", 
                full_width = T, 
                font_size = 12)

# Relatório das cargas fatoriais e das comunalidades
data.frame(cargas_fatoriais) %>%
  rename(F1 = X1,
         F2 = X2) %>%
  mutate(Comunalidades = rowSums(cargas_fatoriais ^ 2)) %>%
  kable() %>%
  kable_styling(bootstrap_options = "striped", 
                full_width = T, 
                font_size = 12)

# Plotagem das Cargas Fatoriais
data.frame(cargas_fatoriais) %>%
  ggplot(aes(x = X1, y = X2)) +
  geom_point(color = "dodgerblue4") +
  geom_hline(yintercept = 0, color = "darkgoldenrod3", linetype = "dashed") +
  geom_vline(xintercept = 0, color = "darkgoldenrod3", linetype = "dashed") +
  geom_text_repel(label = row.names(cargas_fatoriais)) +
  labs(x = paste("F1", paste0("(",
                              round(summary(afpc)$importance[2,1] * 100,
                                    digits = 2),
                                   "%)")),
       y = paste("F2", paste0("(",
                              round(summary(afpc)$importance[2,2] * 100,
                                    digits = 2),
                              "%)"))) +
  theme_bw()
```

## Scores Fatoriais 

```{r}
# Scores Fatoriais
scores_fatoriais <- t(afpc$rotation)/afpc$sdev 
colnames(scores_fatoriais) <- colnames(df)

scores_fatoriais

scores_fatoriais %>%
  t() %>%
  data.frame() %>%
  rename(PC1 = 1,
         PC2 = 2) %>%
  select(PC1, PC2) %>%
  kable() %>%
  kable_styling(bootstrap_options = "striped", 
                full_width = T, 
                font_size = 12)
```

## Ranking

```{r}
# Proposta da construção de um ranking ------------------------------------

#Assumindo-se apenas o F1 e F2 como indicadores, calculam-se os scores 
#fatorias
score_D1 <- scores_fatoriais[1,]
score_D1

score_D2 <- scores_fatoriais[2,]
score_D2

#Estabelecendo o ranking dos indicadores assumido

F1 <- map2_dfr(df, score_D1, ~ .x*.y) |> 
  cbind(as_tibble(rownames(df))) |> 
  column_to_rownames("value")

F2 <- map2_dfr(df, score_D2, ~ .x*.y) |> 
  cbind(as_tibble(rownames(df))) |> 
  column_to_rownames("value")


#Na construção de rankings no R, devemos efetuar a multiplicação por -1, 
#visto que os scores fatoriais das observações mais fortes são, por padrão, 
#apresentados acompanhados do sinal de menos.
F1 <-  data.frame(F1) %>%
  mutate(fator1 = rowSums(.) * -1)

F1 %>%
  kable() %>%
  kable_styling(bootstrap_options = "striped", 
                full_width = T, 
                font_size = 12)

F2 <- data.frame(F2) %>%
  mutate(fator2 = rowSums(.) * -1)

F2 %>%
  kable() %>%
  kable_styling(bootstrap_options = "striped", 
                full_width = T, 
                font_size = 12)

#Importando o data frame original
df_orig <- mtcars
  
# Importando as colunas de fatores F1 e F2
df_orig["Fator1"] <- F1$fator1
df_orig["Fator2"] <- F2$fator2

#Criando um ranking pela soma ponderada dos fatores por sua variância
#compartilhada:

#Calculando a variância compartilhada
var_compartilhada <- (afpc$sdev ^ 2/sum(afpc$sdev ^ 2))
var_compartilhada

df_orig <- df_orig %>% 
  mutate(pontuacao = Fator1 * var_compartilhada[1] +
           Fator2 * var_compartilhada[2]) 

# Visualizando o ranking final
df_orig %>% 
  arrange(desc(pontuacao)) %>% 
  kable() %>%
  kable_styling(bootstrap_options = "striped", 
                full_width = T, 
                font_size = 12)

#Visualizando o ranking
df_orig |> 
  rownames_to_column(var = "modelo") |> 
  mutate (modelo = as_factor(modelo)) |> 
  ggplot(aes(
    x = fct_reorder(modelo, pontuacao), 
    y = pontuacao))+
  coord_flip()+
  geom_col(aes(fill = pontuacao))+
  scale_fill_gradient(low = "darkslategray", high = "green")
```

