---
title: "Previsão de Compra"
execute: 
  warning: false
format:
  html:
    toc: true
    html-math-method: katex
    css: styles.css
    df-print: paged
---

```{r}
library (tidyverse)
library(readr)
library(factoextra)
library (mgcv)
library(nnet)
library(arrow)
library (lubridate)
library (xgboost)
library (caret)

```

Abrindo arquivos criados anteriormente

```{r}
pq_path <- "data/ds_csv"
pq_path2 <- "data/ds_cliente"
pq_path3 <- "data/ds_compras"

ds <- open_dataset(pq_path)
df_cliente <- open_dataset(pq_path2)
df_cliente <- df_cliente |> collect()

df_compras <- open_dataset(pq_path3)
df_compras <- df_compras |> collect()
```


EDA

```{r}
#PerformanceAnalytics::chart.Correlation(df_cliente[c("proximo_compra_dias", "recencia", "freq")])
```

Separando as bases de teste e treino

```{r}
set.seed(123)

df_cliente <- df_cliente |> drop_na() 
df_cliente <- df_cliente |> mutate (comprou_15_dias = case_when(proximo_compra_dias < 15 ~ "sim",
                                                                TRUE ~ "nao"),
                                    comprou_15_dias = as_factor(comprou_15_dias))



#df_cliente$id <- 1:nrow(df_cliente)

#df_cliente_treino <-  df_cliente |>  dplyr::sample_frac(0.70)
#df_cliente_teste <- dplyr::anti_join(df_cliente, df_cliente_treino, by = 'id')

df_cliente_treino <-  df_cliente |>  filter(ultima_compra <= "2022-10-15")
df_cliente_teste <- df_cliente |> filter(ultima_compra > "2022-10-15")


# Treino
df_cliente_treino <- df_cliente_treino |> 
  select(-proximo_compra_dias, -cliente, -primeira_compra, -ultima_compra, -rfm, -score_rfm, -freq, -starts_with("grupo_"))
  #select (comprou_15_dias, recencia, freq, receita, media, std, loja, cidade) 

df_cliente_treino <- df_cliente_treino |> mutate (loja = as_factor(loja),
                                                  cidade = as_factor(cidade))

fct_levels_loja <- levels(df_cliente_treino$loja)
fct_levels_cidade <- levels(df_cliente_treino$cidade)

df_cliente_treino_sparse <- Matrix::sparse.model.matrix(comprou_15_dias ~ ., data = df_cliente_treino)[,-1] 


  
df_cliente_treino <- fastDummies::dummy_columns(df_cliente_treino, 
                                                select_columns = c("loja", "cidade"),
                                   remove_selected_columns = T,
                                   remove_most_frequent_dummy = F,
                                   remove_first_dummy = T)
#Teste
df_cliente_teste <- df_cliente_teste |> 
  select(-proximo_compra_dias, -cliente, -primeira_compra, -ultima_compra, -rfm, -score_rfm, -freq, -starts_with("grupo_"))
  #select (comprou_15_dias, recencia, freq, receita, media, std, loja, cidade) 

df_cliente_teste <- df_cliente_teste |> mutate (loja = as_factor(loja),
                                                cidade = as_factor(cidade))
levels (df_cliente_teste$loja) <- fct_levels_loja
levels (df_cliente_teste$cidade) <- fct_levels_cidade

df_cliente_teste_sparse <- Matrix::sparse.model.matrix(comprou_15_dias ~ ., data = df_cliente_teste)[,-1] 

df_cliente_teste <- fastDummies::dummy_columns(df_cliente_teste, 
                                               select_columns = c("loja", "cidade"),
                                   remove_selected_columns = T,
                                   remove_most_frequent_dummy = F,
                                   remove_first_dummy = T)


#df_cliente_treino <- df_cliente_treino |> dplyr::sample_frac(0.05)
```

Treinando os modelos

```{r}
# mod_reg_05 <- lm(formula = proximo_compra_dias ~ ., data = select (df_cliente_treino, -loja))
# mod_reg_06 <- lm(formula = proximo_compra_dias ~ ., data = df_cliente_treino)
# mod_reg_06_bc <- lm(formula = proximo_compra_dias_bc ~ . -proximo_compra_dias , data = df_cliente_treino)
# 
mod_log_01 <- glm(formula = comprou_15_dias ~ ., family = "binomial", data = dplyr::select(df_cliente_treino, -starts_with("loja"), -starts_with("cidade")))

#sparse_matrix <- Matrix::sparse.model.matrix(comprou_15_dias ~ -1., data = df_cliente_treino)



#param <- list(max_depth = 2, eta = 1, verbose = 0, nthread = 2,
#              objective = "binary:logistic", eval_metric = "auc")
label = as.numeric(df_cliente_treino$comprou_15_dias)-1
set.seed(123)

#dtrain <- xgb.DMatrix(data = sparse_matrix, label = label)
#dtrain <- as.matrix(df_cliente_treino |> select(-1))

# trctrl <- trainControl(method = "cv", number = 10)
# 
# tune_grid <- expand.grid(nrounds=c(30),
#                         max_depth = c(15),
#                         eta = c(1),
#                         gamma = c(0.01, 0.05),
#                         colsample_bytree = c(0.75),
#                         subsample = c(0.50, 0.9),
#                         min_child_weight = c(0))
# 
# mod_xgb_02 <- caret::train(comprou_15_dias ~ ., 
#                            data = df_cliente_treino , 
#                            method = "xgbTree", 
#                            trControl=trctrl, 
#                            tuneGrid = tune_grid, 
#                            tuneLength = 10) 
                           

mod_xgb_01 <- xgboost(data = df_cliente_treino_sparse,
                      label = label,
                      max.depth = 15,
                      eta = 1,
                      nthread = 2,
                      nrounds = 300,
                      objective = "binary:logistic",
                      gamma = 0.01,
                      colsample_bytree = 0.75,
                      subsample = 0.9,
                      min_child_weight = 1)


# mod_xgb_01 <- xgboost(data = as.matrix(select(df_cliente_treino, -comprou_15_dias)), 
#                       label = label, 
#                       max.depth = 15, 
#                       eta = 1, 
#                       nthread = 2, 
#                       nrounds = 300, 
#                       objective = "binary:logistic",
#                       gamma = 0.01,
#                       colsample_bytree = 0.75,
#                       subsample = 0.9,
#                       min_child_weight = 1)

# jtools::export_summs(mod_reg_05)
# jtools::export_summs(mod_log_01)

```

Predição

```{r}
df2 <- select (df_cliente_teste, -comprou_15_dias, -starts_with("loja"),-starts_with("cidade")) 
#df_fit <- predict(mod_xgb_01, df_cliente_teste_sparse)

df_fit <- predict(mod_log_01, newdata = df2, type = "response")
#df_fit <- predict(mod_xgb_01, newdata = as.matrix(df2))
#df_fit <- predict(mod_xgb_02, newdata = df2)
#df_final <- cbind (df_cliente_teste, df_fit = df_fit)

df_final <- cbind (df_cliente_teste, df_fit = df_fit)
df_final <- df_final |> ungroup()
df_final <- df_final |> mutate (df_fit_class = as_factor(case_when(df_fit < 0.5 ~ "nao",
                                        TRUE ~ "sim")))
```

```{r}
caret::confusionMatrix(df_final$df_fit_class, df_final$comprou_15_dias, positive="sim", mode="everything")
```

Analise das features

```{r}
model <- xgb.dump(mod_xgb_01, with_stats = T)
model[1:10] #Top nós
variaveis <- dimnames(data.matrix(select(df_cliente_teste, -comprou_15_dias)))[[2]]
matriz_importancia <- xgb.importance(variaveis, model = mod_xgb_01)
xgb.plot.importance(matriz_importancia[1:10,])
```

